{
  "categories": [
    {
      "name": "Основы",
      "questions": [
        {
          "question": "Что такое Swift?",
          "imageUrl": "https://i.imgur.com/491QKiy.jpg",
          "answers": [
            "Язык программирования",
            "Фреймворк",
            "Библиотека"
          ],
          "correctAnswerIndex": 0,
          "help": "Swift - это мощный и интуитивный язык программирования, разработанный компанией Apple для создания приложений под iOS, macOS и другие платформы."
        },
        {
          "question": "Какое ключевое слово используется для определения констант в Swift?",
          "imageUrl": "",
          "answers": [
            "let",
            "var",
            "const"
          ],
          "correctAnswerIndex": 0,
          "help": "Ключевое слово 'let' используется для определения констант в Swift. Константы - это значения, которые нельзя изменить после инициализации."
        },
        {
          "question": "Какое ключевое слово используется для определения переменных в Swift?",
          "imageUrl": "",
          "answers": [
            "let",
            "var",
            "const"
          ],
          "correctAnswerIndex": 1,
          "help": "Ключевое слово 'var' используется для определения переменных в Swift. Переменные - это значения, которые могут быть изменены после инициализации."
        },
        {
          "question": "Как объявить переменную типа String в Swift?",
          "imageUrl": "",
          "answers": [
            "var name: String",
            "let name = 'John'",
            "var name = String()"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить переменную типа String в Swift, используйте следующую запись: 'var name: String', где 'name' - это имя переменной."
        },
        {
          "question": "Как объявить константу типа Int в Swift?",
          "imageUrl": "",
          "answers": [
            "let number: Int",
            "var number = 10",
            "let number = Int()"
          ],
          "correctAnswerIndex": 2,
          "help": "Чтобы объявить константу типа Int в Swift, используйте следующую запись: 'let number = Int()', где 'number' - это имя константы."
        },
        {
          "question": "Как преобразовать строку '5' в число 5 в Swift?",
          "imageUrl": "",
          "answers": [
            "let number = 5.toInt()",
            "let number = Int('5')",
            "let number = Int('5')!"
          ],
          "correctAnswerIndex": 1,
          "help": "Для преобразования строки '5' в число 5 в Swift, используйте следующую запись: 'let number = Int('5')', где 'number' - это переменная типа Int."
        },
        {
          "question": "Как объявить массив строк в Swift?",
          "imageUrl": "",
          "answers": [
            "var array: [String]",
            "let array: String[]",
            "var array = Array<String>()"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить массив строк в Swift, используйте следующую запись: 'var array: [String]', где 'array' - это имя массива."
        },
        {
          "question": "Как добавить элемент 'apple' в массив ['orange', 'banana'] в Swift?",
          "imageUrl": "",
          "answers": [
            "array.append('apple')",
            "array.insert('apple', at: 0)",
            "array.add('apple')"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы добавить элемент 'apple' в массив ['orange', 'banana'] в Swift, используйте следующую запись: 'array.append('apple')', где 'array' - это массив, в который нужно добавить элемент."
        },
        {
          "question": "Как объявить словарь (dictionary) в Swift?",
          "imageUrl": "",
          "answers": [
            "let dict: Dictionary<String, Any>",
            "var dict = [String: Any]",
            "let dict = Dictionary<String, Any>()"
          ],
          "correctAnswerIndex": 1,
          "help": "Чтобы объявить словарь (dictionary) в Swift, используйте следующую запись: 'var dict = [String: Any]', где 'dict' - это имя словаря."
        },
        {
          "question": "Как добавить пару ключ-значение 'name: 'John' в словарь в Swift?",
          "imageUrl": "",
          "answers": [
            "dict.set('John', forKey: 'name')",
            "dict.add('name', value: 'John')",
            "dict['name'] = 'John'"
          ],
          "correctAnswerIndex": 2,
          "help": "Чтобы добавить пару ключ-значение 'name: 'John' в словарь в Swift, используйте следующую запись: 'dict['name'] = 'John'', где 'dict' - это словарь, в который нужно добавить пару."
        },
        {
          "question": "Как объявить функцию без параметров в Swift?",
          "imageUrl": "",
          "answers": [
            "func myFunction()",
            "func myFunction = ()",
            "function myFunction()"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить функцию без параметров в Swift, используйте следующую запись: 'func myFunction()', где 'myFunction' - это имя функции."
        },
        {
          "question": "Как объявить функцию с параметром name в Swift?",
          "imageUrl": "",
          "answers": [
            "func myFunction(name: String)",
            "func myFunction(String name)",
            "func myFunction(name)"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить функцию с параметром name в Swift, используйте следующую запись: 'func myFunction(name: String)', где 'myFunction' - это имя функции, а 'name' - это имя параметра и его тип (String)."
        },
        {
          "question": "Как вызвать функцию myFunction с аргументом 'John' в Swift?",
          "imageUrl": "",
          "answers": [
            "myFunction('John')",
            "myFunction = 'John'",
            "myFunction(name: 'John')"
          ],
          "correctAnswerIndex": 2,
          "help": "Чтобы вызвать функцию myFunction с аргументом 'John' в Swift, используйте следующую запись: 'myFunction(name: 'John')', где 'myFunction' - это имя функции, а 'name' - это имя параметра и его значение ('John')."
        },
        {
          "question": "Как объявить класс с именем Person в Swift?",
          "imageUrl": "",
          "answers": [
            "class Person",
            "let Person = class",
            "class Person = {}"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить класс с именем Person в Swift, используйте следующую запись: 'class Person', где 'Person' - это имя класса."
        },
        {
          "question": "Как объявить и инициализировать экземпляр класса Person в Swift?",
          "imageUrl": "",
          "answers": [
            "let person = new Person()",
            "let person = Person()",
            "person = Person()"
          ],
          "correctAnswerIndex": 1,
          "help": "Чтобы объявить и инициализировать экземпляр класса Person в Swift, используйте следующую запись: 'let person = Person()', где 'person' - это имя переменной, в которую будет сохранен экземпляр класса."
        },
        {
          "question": "Как объявить и вызвать метод sayHello() в классе Person в Swift?",
          "imageUrl": "",
          "answers": [
            "Person.sayHello()",
            "person.sayHello()",
            "sayHello(Person)"
          ],
          "correctAnswerIndex": 1,
          "help": "Чтобы объявить и вызвать метод sayHello() в классе Person в Swift, используйте следующую запись: 'person.sayHello()', где 'person' - это экземпляр класса, а 'sayHello()' - это имя метода."
        },
        {
          "question": "Что такое опционалы (Optionals) в Swift?",
          "imageUrl": "",
          "answers": [
            "Типы данных, которые могут иметь значение nil",
            "Типы данных, которые не могут иметь значение nil",
            "Типы данных, которые могут иметь только целочисленные значения"
          ],
          "correctAnswerIndex": 0,
          "help": "Опционалы (Optionals) в Swift представляют собой типы данных, которые могут иметь значение nil. Они используются для обработки ситуаций, когда значение может быть отсутствующим."
        },
        {
          "question": "Как обработать опционалы в Swift?",
          "imageUrl": "",
          "answers": [
            "Использовать оператор 'if let'",
            "Использовать оператор 'if'",
            "Обработка опционалов не требуется"
          ],
          "correctAnswerIndex": 0,
          "help": "Для обработки опционалов в Swift используйте оператор 'if let'. Этот оператор позволяет извлечь значение из опционала, если оно существует, и выполнить блок кода только в этом случае."
        },
        {
          "question": "Что такое управление памятью в Swift?",
          "imageUrl": "",
          "answers": [
            "Механизм, который автоматически управляет выделением и освобождением памяти",
            "Процесс, который выполняется вручную разработчиком",
            "Механизм, который контролирует использование оперативной памяти устройства"
          ],
          "correctAnswerIndex": 0,
          "help": "Управление памятью в Swift осуществляется с помощью механизма автоматического управления памятью (Automatic Reference Counting, ARC), который автоматически отслеживает количество активных ссылок на объекты и автоматически освобождает память, когда объект больше не используется."
        },
        {
          "question": "Как объявить замыкание (closure) в Swift?",
          "imageUrl": "",
          "answers": [
            "let closure = { () -> Void in }",
            "let closure: () -> Void = {}",
            "func closure() -> Void {}"
          ],
          "correctAnswerIndex": 1,
          "help": "Чтобы объявить замыкание (closure) в Swift, используйте следующую запись: 'let closure: () -> Void = {}', где 'closure' - это имя замыкания и его тип (() -> Void)."
        },
        {
          "question": "Как вызвать замыкание closure?",
          "imageUrl": "",
          "answers": [
            "closure()",
            "execute(closure)",
            "run(closure)"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы вызвать замыкание closure, используйте запись 'closure()', где 'closure' - это имя замыкания."
        },
        {
          "question": "Как объявить и использовать условное выражение if в Swift?",
          "imageUrl": "",
          "answers": [
            "if condition { // code }",
            "if { condition } // code",
            "if (condition) { // code }"
          ],
          "correctAnswerIndex": 0,
          "help": "Чтобы объявить и использовать условное выражение if в Swift, используйте следующую запись: 'if condition"
        }
      ]
    },
    {
      "name": "ARC",
      "questions": [
        {
          "question": "Что такое ARC в Swift?",
          "imageUrl": "https://i.imgur.com/Y0GzEyE.jpg",
          "answers": [
            "Автоматическое управление памятью",
            "Механизм для управления потоками в Swift",
            "Протоколы для работы с асинхронными операциями"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC означает Automatic Reference Counting и используется для автоматического управления памятью в Swift."
        },
        {
          "question": "Какие типы данных могут быть использованы с ARC?",
          "imageUrl": "",
          "answers": [
            "Только классы",
            "Только структуры",
            "Только перечисления",
            "Классы, структуры и перечисления"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC применяется только к объектам классов в Swift."
        },
        {
          "question": "Каким образом ARC освобождает память в Swift?",
          "imageUrl": "",
          "answers": [
            "Автоматически по завершении использования объекта",
            "Путем явного вызова деструктора",
            "Путем вызова метода release()"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC освобождает память автоматически, когда объект больше не используется."
        },
        {
          "question": "Как можно избежать утечек памяти с помощью ARC в Swift?",
          "imageUrl": "",
          "answers": [
            "Использовать слабые ссылки",
            "Использовать безопасные счетчики ссылок",
            "Использовать ручное управление памятью"
          ],
          "correctAnswerIndex": 0,
          "help": "Для избежания утечек памяти с помощью ARC в Swift рекомендуется использовать слабые ссылки."
        },
        {
          "question": "Можно ли вручную управлять памятью с помощью ARC в Swift?",
          "imageUrl": "",
          "answers": [
            "Нет",
            "Да",
            "Только для объектов классов"
          ],
          "correctAnswerIndex": 0,
          "help": "Нет, вручную управлять памятью с помощью ARC нельзя. ARC автоматически управляет памятью за вас."
        },
        {
          "question": "Какие основные принципы работы ARC в Swift?",
          "imageUrl": "",
          "answers": [
            "Счетчик ссылок",
            "Очереди GCD",
            "Компилятор Swift"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC использует счетчик ссылок для отслеживания количества ссылок на объект и освобождает память, когда количество ссылок становится равным нулю."
        },
        {
          "question": "Каким образом ARC избегает утечек памяти в Swift?",
          "imageUrl": "",
          "answers": [
            "Путем автоматического увеличения счетчика ссылок",
            "Путем автоматического уменьшения счетчика ссылок",
            "Путем автоматического освобождения памяти"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC избегает утечек памяти путем автоматического увеличения счетчика ссылок при каждом новом владельце объекта."
        },
        {
          "question": "Каким образом ARC решает проблему циклических ссылок?",
          "imageUrl": "",
          "answers": [
            "Путем использования слабых ссылок",
            "Путем вызова метода deinit",
            "Путем явного освобождения памяти"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC решает проблему циклических ссылок путем использования слабых ссылок, которые не увеличивают счетчик ссылок."
        },
        {
          "question": "Можно ли использовать ARC вместе с ручным управлением памятью в Swift?",
          "imageUrl": "",
          "answers": [
            "Да",
            "Нет",
            "Только для объектов классов"
          ],
          "correctAnswerIndex": 1,
          "help": "Нет, использование ARC и ручного управления памятью вместе может привести к проблемам и утечкам памяти."
        },
        {
          "question": "Какие объекты освобождаются автоматически с помощью ARC?",
          "imageUrl": "",
          "answers": [
            "Только объекты классов",
            "Только объекты структур",
            "Только объекты перечислений",
            "Все объекты"
          ],
          "correctAnswerIndex": 0,
          "help": "ARC автоматически освобождает память только для объектов классов."
        },
        {
          "question": "Что происходит, когда счетчик ссылок объекта становится равным нулю?",
          "imageUrl": "",
          "answers": [
            "Объект уничтожается и память освобождается",
            "Объект переходит в режим сильной ссылки",
            "Объект переходит в режим слабой ссылки"
          ],
          "correctAnswerIndex": 0,
          "help": "Когда счетчик ссылок объекта становится равным нулю, объект уничтожается и память, занимаемая им, освобождается."
        },
        {
          "question": "Можно ли использовать unowned ссылки с ARC?",
          "imageUrl": "",
          "answers": [
            "Да",
            "Нет",
            "Только для классов"
          ],
          "correctAnswerIndex": 0,
          "help": "Да, unowned ссылки могут быть использованы с ARC для предотвращения циклических ссылок и утечек памяти."
        },
        {
          "question": "Какие объекты не управляются с помощью ARC?",
          "imageUrl": "",
          "answers": [
            "Объекты классов",
            "Объекты структур",
            "Объекты перечислений",
            "Объекты сильных ссылок"
          ],
          "correctAnswerIndex": 3,
          "help": "Объекты сильных ссылок не управляются с помощью ARC, и вам нужно самостоятельно следить за их памятью."
        },
        {
          "question": "Может ли объект иметь несколько сильных ссылок?",
          "imageUrl": "",
          "answers": [
            "Да",
            "Нет",
            "Только для структур"
          ],
          "correctAnswerIndex": 0,
          "help": "Да, объект может иметь несколько сильных ссылок, и ARC будет управлять их счетчиками ссылок."
        },
        {
          "question": "Как можно установить слабую ссылку на объект в Swift?",
          "imageUrl": "",
          "answers": [
            "С помощью ключевого слова weak",
            "С помощью ключевого слова unowned",
            "С помощью ключевого слова strong"
          ],
          "correctAnswerIndex": 0,
          "help": "Для установки слабой ссылки на объект в Swift используется ключевое слово weak."
        }
      ]
    },
    {
      "name": "UIKIT",
      "questions": [
        {
          "question": "Что такое UIKit?",
          "imageUrl": "https://i.imgur.com/9hUXiD7.png",
          "answers": [
            "Фреймворк для создания графического интерфейса в iOS",
            "Библиотека для работы с базами данных",
            "Язык программирования для мобильной разработки"
          ],
          "correctAnswerIndex": 0,
          "help": "UIKit - это фреймворк, предоставляющий инструменты для создания графического интерфейса пользовательского приложения в операционной системе iOS."
        },
        {
          "question": "Какие основные компоненты пользовательского интерфейса предоставляет UIKit?",
          "imageUrl": "",
          "answers": [
            "View, Button, Label, TextField и другие",
            "Сервер, Клиент, Прокси-сервер, Порт",
            "Модель, Представление, Контроллер"
          ],
          "correctAnswerIndex": 0,
          "help": "UIKit предоставляет множество компонентов пользовательского интерфейса, таких как View, Button, Label, TextField и другие, для построения интерактивных приложений."
        },
        {
          "question": "Что такое Auto Layout в UIKit?",
          "imageUrl": "",
          "answers": [
            "Механизм размещения и выравнивания элементов интерфейса",
            "Автоматическая генерация кода для приложения",
            "Способ автоматической смены темы приложения"
          ],
          "correctAnswerIndex": 0,
          "help": "Auto Layout - это механизм в UIKit, который позволяет создавать адаптивные интерфейсы, определяя правила размещения и выравнивания элементов на экране."
        },
        {
          "question": "Какие классы отвечают за обработку жестов в UIKit?",
          "imageUrl": "",
          "answers": [
            "UIGestureRecognizer и его подклассы",
            "UIEventHandler и UIActionResponder",
            "GestureHandler и GestureResponder"
          ],
          "correctAnswerIndex": 0,
          "help": "Обработка жестов в UIKit осуществляется с помощью класса UIGestureRecognizer и его подклассов, позволяя реагировать на различные пользовательские жесты."
        },
        {
          "question": "Что такое UINavigationController?",
          "imageUrl": "",
          "answers": [
            "Контроллер навигации для управления стеком представлений",
            "Контроллер для работы с базами данных",
            "Контроллер для многопоточных операций"
          ],
          "correctAnswerIndex": 0,
          "help": "UINavigationController - это контроллер навигации в UIKit, который управляет стеком представлений (View Controllers) и обеспечивает навигацию внутри приложения."
        },
        {
          "question": "Что такое IBOutlet и IBAction в контексте UIKit?",
          "imageUrl": "",
          "answers": [
            "IBOutlet - связь между элементом интерфейса и кодом, IBAction - метод, вызываемый из интерфейса",
            "IBOutlet - метод, вызываемый из интерфейса, IBAction - свойство элемента интерфейса",
            "IBOutlet и IBAction - сокращения для названий контролов"
          ],
          "correctAnswerIndex": 0,
          "help": "IBOutlet используется для связи элементов интерфейса (например, UI элементов) с кодом программы. IBAction - это аннотация, которая указывает, что метод может быть вызван из интерфейса (например, при нажатии кнопки)."
        },
        {
          "question": "Что такое UIViewController?",
          "imageUrl": "",
          "answers": [
            "Базовый класс для управления отображением экрана",
            "Класс для создания пользовательских элементов интерфейса",
            "Класс для работы с анимациями"
          ],
          "correctAnswerIndex": 0,
          "help": "UIViewController - это базовый класс в UIKit, который используется для управления отображением и поведением экранов (View Controllers) в iOS-приложении."
        },
        {
          "question": "Какой метод вызывается при загрузке view в UIViewController?",
          "imageUrl": "",
          "answers": [
            "viewDidLoad",
            "viewWillAppear",
            "viewDidAppear"
          ],
          "correctAnswerIndex": 0,
          "help": "Метод viewDidLoad вызывается после загрузки view контроллера в память, позволяя инициализировать элементы интерфейса и выполнить другие подготовительные действия."
        },
        {
          "question": "Что такое Storyboard в UIKit?",
          "imageUrl": "",
          "answers": [
            "Графическое представление пользовательского интерфейса и навигации",
            "Библиотека готовых компонентов интерфейса",
            "Язык разметки для описания интерфейса"
          ],
          "correctAnswerIndex": 0,
          "help": "Storyboard - это графическое представление пользовательского интерфейса и навигации между экранами в iOS-приложении, позволяющее визуально разработать структуру приложения."
        },
        {
          "question": "Что такое UITableView?",
          "imageUrl": "",
          "answers": [
            "Класс для отображения списковых данных в виде таблицы",
            "Класс для создания анимаций интерфейса",
            "Класс для работы с базами данных"
          ],
          "correctAnswerIndex": 0,
          "help": "UITableView - это класс в UIKit, предназначенный для отображения списковых данных в виде таблицы с прокруткой, как например в списке контактов или настройках."
        },
        {
          "question": "Что такое UICollectionView?",
          "imageUrl": "",
          "answers": [
            "Класс для отображения данных в форме сетки или кастомных макетов",
            "Класс для работы с сетью",
            "Класс для создания анимаций интерфейса"
          ],
          "correctAnswerIndex": 0,
          "help": "UICollectionView - это класс в UIKit, позволяющий создавать гибкие и кастомные макеты для отображения данных в форме сетки или других макетов."
        },
        {
          "question": "Какой класс отвечает за работу с изображениями в UIKit?",
          "imageUrl": "",
          "answers": [
            "UIImage",
            "UIImageView",
            "UImageProcessor"
          ],
          "correctAnswerIndex": 0,
          "help": "Класс UIImage в UIKit представляет изображения, а класс UIImageView предоставляет элемент интерфейса для отображения изображений на экране."
        },
        {
          "question": "Что такое UIStackView?",
          "imageUrl": "",
          "answers": [
            "Контейнер для упорядочивания и выравнивания элементов интерфейса",
            "Контроллер для управления стеком view controllers",
            "Модель для хранения данных интерфейса"
          ],
          "correctAnswerIndex": 0,
          "help": "UIStackView - это контейнер в UIKit, который упрощает упорядочивание и выравнивание элементов интерфейса, таких как кнопки и текстовые поля."
        },
        {
          "question": "Какие классы используются для создания анимаций в UIKit?",
          "imageUrl": "",
          "answers": [
            "UIView и Core Animation",
            "UIAnimation и AnimationHandler",
            "UIGesture и GestureRecognizer"
          ],
          "correctAnswerIndex": 0,
          "help": "Для создания анимаций в UIKit используются классы UIView и Core Animation, предоставляющие возможности для анимирования свойств элементов интерфейса."
        },
        {
          "question": "Что такое Autoresizing Mask в UIKit?",
          "imageUrl": "",
          "answers": [
            "Механизм автоматической подстройки размеров элементов при изменении размера",
            "Маска для обрезки изображений",
            "Маска для рисования пользовательского интерфейса"
          ],
          "correctAnswerIndex": 0,
          "help": "Autoresizing Mask - это механизм в UIKit, позволяющий автоматически изменять размер и положение элементов интерфейса при изменении размера родительского контейнера."
        },
        {
          "question": "Что такое Core Graphics (Quartz 2D) в контексте UIKit?",
          "imageUrl": "",
          "answers": [
            "Фреймворк для работы с графикой и рисования на уровне пикселей",
            "Фреймворк для создания анимаций",
            "Фреймворк для работы с базами данных"
          ],
          "correctAnswerIndex": 0,
          "help": "Core Graphics (Quartz 2D) - это фреймворк в UIKit, предоставляющий функции для работы с графикой, включая рисование, создание изображений и обработку контекстов."
        }
      ]
    },
    {
      "name": "Networking",
      "questions": [
        {
          "question": "Что такое HTTP?",
          "imageUrl": "https://i.imgur.com/AqGadW5.png",
          "answers": [
            "Протокол передачи гипертекста",
            "Высокая технология переноса данных",
            "Программа для создания сайтов"
          ],
          "correctAnswerIndex": 0,
          "help": "HTTP (Hypertext Transfer Protocol) - это протокол передачи гипертекста, используемый для обмена данными между веб-серверами и клиентами (браузерами)."
        },
        {
          "question": "Какие основные методы HTTP-запросов вы знаете?",
          "imageUrl": "",
          "answers": [
            "GET, POST, PUT, DELETE",
            "FETCH, SEND, UPDATE, REMOVE",
            "READ, WRITE, UPDATE, DELETE"
          ],
          "correctAnswerIndex": 0,
          "help": "Основные методы HTTP-запросов: GET (получение данных), POST (отправка данных), PUT (обновление данных), DELETE (удаление данных)."
        },
        {
          "question": "Какие основные протоколы используются для отправки почты?",
          "imageUrl": "",
          "answers": [
            "SMTP, IMAP, POP3",
            "HTTP, FTP, TCP",
            "DNS, DHCP, HTTPS"
          ],
          "correctAnswerIndex": 0,
          "help": "Основные протоколы для отправки почты: SMTP (Simple Mail Transfer Protocol) - отправка, IMAP (Internet Message Access Protocol) - получение, POP3 (Post Office Protocol) - получение."
        },
        {
          "question": "Что такое IP-адрес?",
          "imageUrl": "",
          "answers": [
            "Уникальный адрес компьютера в сети",
            "Идентификатор веб-сайта",
            "Номер порта для соединения"
          ],
          "correctAnswerIndex": 0,
          "help": "IP-адрес (Internet Protocol address) - это уникальный числовой адрес, присвоенный каждому устройству, подключенному к компьютерной сети, чтобы идентифицировать его в сети."
        },
        {
          "question": "Что такое DNS?",
          "imageUrl": "",
          "answers": [
            "Система имён доменов",
            "Метод шифрования данных",
            "Протокол сетевой безопасности"
          ],
          "correctAnswerIndex": 0,
          "help": "DNS (Domain Name System) - это система имён доменов, которая переводит удобочитаемые доменные имена (например, example.com) в IP-адреса, используемые компьютерами для идентификации в сети."
        },
        {
          "question": "Какой порт обычно используется для HTTPS?",
          "imageUrl": "",
          "answers": [
            "Порт 443",
            "Порт 80",
            "Порт 22"
          ],
          "correctAnswerIndex": 0,
          "help": "Для HTTPS (защищенный HTTP) обычно используется порт 443."
        },
        {
          "question": "Что такое RESTful API?",
          "imageUrl": "",
          "answers": [
            "Архитектурный стиль для создания веб-сервисов",
            "Компьютерная программа для обработки данных",
            "Программное обеспечение для мониторинга сети"
          ],
          "correctAnswerIndex": 0,
          "help": "RESTful API - это архитектурный стиль для создания веб-сервисов, который использует HTTP-методы для работы с ресурсами."
        },
        {
          "question": "Что такое JSON?",
          "imageUrl": "",
          "answers": [
            "Формат обмена данными",
            "Язык программирования",
            "Протокол безопасной передачи данных"
          ],
          "correctAnswerIndex": 0,
          "help": "JSON (JavaScript Object Notation) - это текстовый формат обмена данными, основанный на языке JavaScript, часто используется для передачи структурированных данных между клиентом и сервером."
        },
        {
          "question": "Что такое CORS?",
          "imageUrl": "",
          "answers": [
            "Cross-Origin Resource Sharing",
            "Centralized Object Relocation System",
            "Client-Origin Resource Security"
          ],
          "correctAnswerIndex": 0,
          "help": "CORS (Cross-Origin Resource Sharing) - это механизм безопасности браузера, позволяющий разрешать или запрещать запросы на доступ к ресурсам с других доменов."
        },
        {
          "question": "Какой HTTP-код обычно указывает на успешное выполнение запроса?",
          "imageUrl": "",
          "answers": [
            "HTTP-код 200 OK",
            "HTTP-код 404 Not Found",
            "HTTP-код 500 Internal Server Error"
          ],
          "correctAnswerIndex": 0,
          "help": "HTTP-код 200 OK обычно указывает на успешное выполнение запроса и возврат запрошенных данных."
        },
        {
          "question": "Что такое SSL/TLS?",
          "imageUrl": "",
          "answers": [
            "Протоколы шифрования для защиты данных",
            "Протоколы маршрутизации в сети",
            "Протоколы для передачи файлов"
          ],
          "correctAnswerIndex": 0,
          "help": "SSL (Secure Sockets Layer) и его более современный вариант TLS (Transport Layer Security) - это протоколы шифрования, используемые для обеспечения безопасной передачи данных в интернете."
        },
        {
          "question": "Что такое WebSockets?",
          "imageUrl": "",
          "answers": [
            "Протокол для обмена данными в реальном времени",
            "Протокол для передачи электронной почты",
            "Протокол для создания сайтов"
          ],
          "correctAnswerIndex": 0,
          "help": "WebSockets - это протокол для обмена данными в реальном времени между веб-браузером и сервером с использованием одного соединения."
        },
        {
          "question": "Какое преимущество имеет UDP перед TCP?",
          "imageUrl": "",
          "answers": [
            "Более быстрая передача, но без гарантии доставки",
            "Более надежная передача с контролем ошибок",
            "Меньшее количество использованных портов"
          ],
          "correctAnswerIndex": 0,
          "help": "UDP (User Datagram Protocol) предоставляет более быструю передачу данных, но без гарантии доставки или контроля ошибок, что делает его подходящим для ситуаций, где небольшие задержки более важны, чем надежность передачи."
        },
        {
          "question": "Что такое Firewall?",
          "imageUrl": "",
          "answers": [
            "Система защиты сети от несанкционированного доступа",
            "Система балансировки нагрузки",
            "Система автоматизации работы сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Firewall - это система защиты сети, которая контролирует и ограничивает доступ к сетевым ресурсам, блокируя несанкционированные или опасные соединения."
        },
        {
          "question": "Что такое DDOS-атака?",
          "imageUrl": "",
          "answers": [
            "Атака на сервер путем перегрузки трафиком",
            "Атака на базу данных",
            "Атака на систему аутентификации"
          ],
          "correctAnswerIndex": 0,
          "help": "DDOS (Distributed Denial of Service) - это атака на сервер путем перегрузки его трафиком из множества источников, с целью временно вывести его из строя."
        }
      ]
    },
    {
      "name": "Многопоточность",
      "questions": [
        {
          "question": "Что такое многопоточность?",
          "imageUrl": "https://i.imgur.com/Eue8oOc.png",
          "answers": [
            "Механизм выполнения нескольких потоков",
            "Методика программирования баз данных",
            "Тип архитектуры сетей"
          ],
          "correctAnswerIndex": 0,
          "help": "Многопоточность - это механизм, позволяющий программам выполняться параллельно в нескольких потоках, ускоряя обработку задач."
        },
        {
          "question": "Какое преимущество предоставляет многопоточное программирование?",
          "imageUrl": "",
          "answers": [
            "Повышение эффективности использования ресурсов",
            "Увеличение объема оперативной памяти",
            "Ускорение работы сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Многопоточное программирование позволяет эффективнее использовать многозадачность и параллельные вычисления, улучшая общую производительность программы."
        },
        {
          "question": "Какие проблемы могут возникнуть при многопоточном программировании?",
          "imageUrl": "",
          "answers": [
            "Состояния гонки, дедлоки, взаимная блокировка",
            "Отсутствие сетевой безопасности, низкая скорость передачи",
            "Ошибки в структурах данных, недостаток памяти"
          ],
          "correctAnswerIndex": 0,
          "help": "При многопоточном программировании могут возникать состояния гонки, дедлоки (зависание), взаимная блокировка и другие проблемы, связанные с параллельным выполнением кода."
        },
        {
          "question": "Чем отличается поток от процесса?",
          "imageUrl": "",
          "answers": [
            "Поток - это часть процесса, выполняющаяся параллельно",
            "Процесс - это часть потока, выполняющаяся параллельно",
            "Поток и процесс - синонимы"
          ],
          "correctAnswerIndex": 0,
          "help": "Поток - это малая параллельная единица выполнения в рамках процесса. Процесс - это независимая программа, содержащая как минимум один поток."
        },
        {
          "question": "Что такое дедлок в многопоточных программах?",
          "imageUrl": "",
          "answers": [
            "Ситуация, когда потоки блокируют друг друга",
            "Механизм синхронизации данных",
            "Большое количество одновременно выполняющихся потоков"
          ],
          "correctAnswerIndex": 0,
          "help": "Дедлок - это ситуация, при которой два или более потока заблокированы, ожидая друг друга, что приводит к остановке программы."
        },
        {
          "question": "Что такое синхронизация потоков?",
          "imageUrl": "",
          "answers": [
            "Контроль доступа к общим ресурсам из разных потоков",
            "Параллельное выполнение кода в нескольких потоках",
            "Изоляция потоков друг от друга"
          ],
          "correctAnswerIndex": 0,
          "help": "Синхронизация потоков - это механизм контроля доступа к общим ресурсам из разных потоков для предотвращения состояний гонки и других проблем."
        },
        {
          "question": "Какие инструменты синхронизации используются в многопоточном программировании?",
          "imageUrl": "",
          "answers": [
            "Мьютексы, семафоры, условные переменные",
            "Массивы и структуры данных",
            "Функции для работы с сетью"
          ],
          "correctAnswerIndex": 0,
          "help": "В многопоточном программировании используются инструменты синхронизации, такие как мьютексы, семафоры и условные переменные, для управления доступом к общим ресурсам."
        },
        {
          "question": "Что такое потокобезопасность?",
          "imageUrl": "",
          "answers": [
            "Способность кода работать корректно в многопоточной среде",
            "Отсутствие потоков в программе",
            "Высокая производительность при однопоточном выполнении"
          ],
          "correctAnswerIndex": 0,
          "help": "Потокобезопасность - это способность кода корректно работать в многопоточной среде, обеспечивая правильное взаимодействие потоков и безопасность данных."
        },
        {
          "question": "Что такое пул потоков?",
          "imageUrl": "",
          "answers": [
            "Набор предварительно созданных потоков для повторного использования",
            "Группа процессов, выполняющихся параллельно",
            "Механизм маршрутизации данных в сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Пул потоков - это набор предварительно созданных потоков, которые могут повторно использоваться для выполнения различных задач, снижая накладные расходы на создание и уничтожение потоков."
        },
        {
          "question": "Какие языки программирования поддерживают многопоточность?",
          "imageUrl": "",
          "answers": [
            "Многие современные языки, такие как Java, Python, C#",
            "Только низкоуровневые языки, такие как C и Ассемблер",
            "Только функциональные языки программирования"
          ],
          "correctAnswerIndex": 0,
          "help": "Многопоточность поддерживается многими современными языками программирования, такими как Java, Python, C# и другими."
        },
        {
          "question": "Что такое атомарная операция?",
          "imageUrl": "",
          "answers": [
            "Операция, выполняющаяся целиком и неделимо",
            "Операция, выполняющаяся только в многопотоковой среде",
            "Операция, выполняющаяся в виртуальной машине"
          ],
          "correctAnswerIndex": 0,
          "help": "Атомарная операция - это операция, которая выполняется целиком и неделимо, даже если множество потоков пытаются выполнить её одновременно."
        },
        {
          "question": "Что такое параллельные вычисления?",
          "imageUrl": "",
          "answers": [
            "Выполнение нескольких вычислений одновременно",
            "Выполнение вычислений только на главном потоке",
            "Выполнение вычислений на разных устройствах"
          ],
          "correctAnswerIndex": 0,
          "help": "Параллельные вычисления - это выполнение нескольких вычислений или задач одновременно, что может привести к улучшению производительности."
        },
        {
          "question": "Что такое многозадачность?",
          "imageUrl": "",
          "answers": [
            "Выполнение нескольких задач одновременно",
            "Выполнение одной задачи на нескольких ядрах процессора",
            "Выполнение задачи на разных устройствах"
          ],
          "correctAnswerIndex": 0,
          "help": "Многозадачность - это способность системы выполнять несколько задач (программ) одновременно, часто с помощью многопоточности."
        },
        {
          "question": "Что такое критическая секция?",
          "imageUrl": "",
          "answers": [
            "Участок кода, требующий эксклюзивного доступа",
            "Участок кода, выполняющийся только на главном потоке",
            "Участок кода, выполняющийся в параллельном потоке"
          ],
          "correctAnswerIndex": 0,
          "help": "Критическая секция - это участок кода, в котором поток должен иметь эксклюзивный доступ к общим данным, чтобы избежать состояний гонки."
        },
        {
          "question": "Какие подходы можно использовать для устранения состояний гонки?",
          "imageUrl": "",
          "answers": [
            "Использование синхронизации, атомарных операций",
            "Использование большего количества потоков",
            "Использование более быстрого процессора"
          ],
          "correctAnswerIndex": 0,
          "help": "Для устранения состояний гонки можно использовать синхронизацию (мьютексы, семафоры) и атомарные операции, чтобы обеспечить правильное взаимодействие между потоками."
        }
      ]
    },
    {
      "name": "Собеседование",
      "questions": [
        {
          "question": "Что такое SOLID принципы?",
          "imageUrl": "https://i.imgur.com/Oft6xJy.png",
          "answers": [
            "Принципы проектирования программного обеспечения для создания гибких и понятных систем",
            "Аббревиатура названий популярных языков программирования",
            "Способы кодирования для обеспечения высокой производительности"
          ],
          "correctAnswerIndex": 0,
          "help": "SOLID - это аббревиатура для пяти принципов проектирования программного обеспечения.Эти принципы помогают создавать гибкие, понятные и легко расширяемые системы."
        },
        {
          "question": "Что такое паттерн проектирования?",
          "imageUrl": "https://i.imgur.com/XKBFncK.png",
          "answers": [
            "Шаблон решения типичных проблем проектирования программ",
            "Стандартный набор функций языка программирования",
            "Методология разработки алгоритмов"
          ],
          "correctAnswerIndex": 0,
          "help": "Паттерн проектирования - это шаблон решения типичных проблем проектирования программ."
        },
        {
          "question": "Что такое DRY принцип?",
          "imageUrl": "",
          "answers": [
            "Don't Repeat Yourself - принцип избегания дублирования кода",
            "Design, Review, Yield - принцип этапов разработки",
            "Data Retrieval Yields - принцип работы с базами данных"
          ],
          "correctAnswerIndex": 0,
          "help": "DRY (Don't Repeat Yourself) - это принцип программирования, который призывает избегать дублирования кода и данных в системе, чтобы обеспечить удобство сопровождения и изменений."
        },
        {
          "question": "Что такое Big O нотация?",
          "imageUrl": "",
          "answers": [
            "Обозначение сложности алгоритма относительно размера входных данных",
            "Обозначение размера оперативной памяти компьютера",
            "Обозначение количества потоков в многопоточной программе"
          ],
          "correctAnswerIndex": 0,
          "help": "Big O нотация - это способ оценки алгоритмической сложности, который позволяет оценить, как быстро растет время выполнения алгоритма по мере увеличения размера входных данных."
        },
        {
          "question": "Что такое рекурсия?",
          "imageUrl": "",
          "answers": [
            "Метод решения задачи путем вызова функцией самой себя",
            "Тип данных для хранения структурированных данных",
            "Способ передачи данных по сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Рекурсия - это метод решения задачи, при котором функция вызывает сама себя для обработки более простых случаев задачи, пока не достигнет базового случая."
        },
        {
          "question": "Что такое SQL Injection?",
          "imageUrl": "",
          "answers": [
            "Атака на базу данных через внедрение вредоносного SQL кода",
            "Метод подключения базы данных к приложению",
            "Механизм шифрования данных в базе данных"
          ],
          "correctAnswerIndex": 0,
          "help": "SQL Injection - это атака на базу данных, при которой злоумышленник внедряет вредоносный SQL код через пользовательский ввод, чтобы получить несанкционированный доступ к данным."
        },
        {
          "question": "Что такое асинхронное программирование?",
          "imageUrl": "",
          "answers": [
            "Стиль программирования, при котором задачи выполняются параллельно без блокировки потока",
            "Стиль программирования для работы с синхронными операциями",
            "Метод программирования на языке Assembler"
          ],
          "correctAnswerIndex": 0,
          "help": "Асинхронное программирование - это стиль программирования, при котором задачи выполняются параллельно, позволяя продолжать выполнение других задач без блокировки потока выполнения."
        },
        {
          "question": "Что такое контейнер в контексте виртуализации?",
          "imageUrl": "",
          "answers": [
            "Среда, позволяющая запускать и изолировать приложения и сервисы",
            "Компьютерный аппарат для хранения данных",
            "Структура данных для хранения элементов"
          ],
          "correctAnswerIndex": 0,
          "help": "Контейнер в контексте виртуализации - это среда, которая позволяет изолировать приложения и сервисы от остальной системы, обеспечивая их портабельность и масштабируемость."
        },
        {
          "question": "Что такое Git?",
          "imageUrl": "https://i.imgur.com/ryzygvX.jpg",
          "answers": [
            "Распределенная система контроля версий",
            "Язык программирования для создания веб-сайтов",
            "Протокол для передачи данных в сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Git - это распределенная система контроля версий, используемая для управления исходным кодом проекта, отслеживания изменений и совместной разработки."
        },
        {
          "question": "Что такое Docker?",
          "imageUrl": "",
          "answers": [
            "Платформа для разработки, доставки и запуска приложений в контейнерах",
            "Язык программирования для создания мобильных приложений",
            "Протокол для обмена сообщениями в распределенных системах"
          ],
          "correctAnswerIndex": 0,
          "help": "Docker - это платформа, которая позволяет разрабатывать, доставлять и запускать приложения в контейнерах, обеспечивая среду изоляции и портабельности."
        },
        {
          "question": "Что такое RESTful API?",
          "imageUrl": "",
          "answers": [
            "Архитектурный стиль для создания веб-сервисов",
            "Компьютерная программа для обработки данных",
            "Программное обеспечение для мониторинга сети"
          ],
          "correctAnswerIndex": 0,
          "help": "RESTful API - это архитектурный стиль для создания веб-сервисов, который использует HTTP-методы для работы с ресурсами."
        },
        {
          "question": "Что такое XSS (Cross-Site Scripting) атака?",
          "imageUrl": "",
          "answers": [
            "Атака, при которой вредоносный код выполняется на стороне клиента",
            "Атака на сервер путем перегрузки трафиком",
            "Атака на базу данных через SQL инъекцию"
          ],
          "correctAnswerIndex": 0,
          "help": "XSS (Cross-Site Scripting) - это атака, при которой злоумышленник внедряет вредоносный скрипт в веб-страницу, который выполняется на стороне клиента, с целью получения доступа к данным пользователя."
        },
        {
          "question": "Что такое CSRF (Cross-Site Request Forgery) атака?",
          "imageUrl": "",
          "answers": [
            "Атака, при которой злоумышленник заставляет пользователя выполнить нежелательное действие на веб-сайте",
            "Атака на сервер через перегрузку трафиком",
            "Атака на сетевой протокол"
          ],
          "correctAnswerIndex": 0,
          "help": "CSRF (Cross-Site Request Forgery) - это атака, при которой злоумышленник заставляет аутентифицированного пользователя выполнить нежелательное действие на веб-сайте без его согласия."
        },
        {
          "question": "Что такое NoSQL база данных?",
          "imageUrl": "",
          "answers": [
            "Тип базы данных, отличающийся от реляционных моделей хранения",
            "Язык программирования для создания приложений",
            "Протокол для обмена структурированными данными"
          ],
          "correctAnswerIndex": 0,
          "help": "NoSQL (Not Only SQL) - это тип баз данных, предназначенных для хранения и обработки данных, отличающийся от традиционных реляционных моделей."
        },
        {
          "question": "Что такое многопоточность?",
          "imageUrl": "",
          "answers": [
            "Способ выполнения нескольких задач в одном процессе параллельно",
            "Способ выполнения задач в разных процессах",
            "Метод передачи данных по сети"
          ],
          "correctAnswerIndex": 0,
          "help": "Многопоточность - это способ выполнения нескольких задач внутри одного процесса параллельно, что может улучшить производительность и отзывчивость программы."
        }
      ]
    }
  ]
}
